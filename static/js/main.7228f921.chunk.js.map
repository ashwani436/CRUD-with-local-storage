{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","submitForm","e","preventDefault","inputValue","target","input","value","setState","data","state","window","localStorage","setItem","JSON","stringify","edit","index","isEditable","updateForm","newData","deleteData","filteredData","filter","check","getItem","parse","Array","isArray","length","this","className","onSubmit","type","name","placeholder","map","onClick","style","display","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAqFeA,E,kDAlFd,aAAc,IAAD,8BACZ,gBAaDC,WAAa,SAAAC,GACZA,EAAEC,iBACF,IAAMC,EAAaF,EAAEG,OAAOC,MAAMC,MAClC,EAAKC,SAAS,CAAEC,KAAK,GAAD,mBAAM,EAAKC,MAAMD,MAAjB,CAAuBL,MAAe,WACzDO,OAAOC,aAAaC,QAAQ,OAAQC,KAAKC,UAAU,EAAKL,MAAMD,WAlBnD,EAqBbO,KAAO,SAAAC,GACN,EAAKT,SAAS,CAAEU,WAAYD,KAtBhB,EAyBbE,WAAa,SAAAjB,GACZA,EAAEC,iBACF,IAAMC,EAAaF,EAAEG,OAAOC,MAAMC,MAClC,EAA6B,EAAKG,MAA1BD,EAAR,EAAQA,KAAMS,EAAd,EAAcA,WACRE,EAAO,YAAOX,GACpBW,EAAQF,GAAcd,EACtB,EAAKI,SAAS,CAAEC,KAAMW,IAAW,WAChCT,OAAOC,aAAaC,QAAQ,OAAQC,KAAKC,UAAU,EAAKL,MAAMD,WAhCnD,EAmCbY,WAAa,WACZ,MAA6B,EAAKX,MAA1BD,EAAR,EAAQA,KAAMS,EAAd,EAAcA,WAERI,EADO,YAAOb,GACSc,QAAO,SAACjB,EAAOW,GAAR,OAAkBA,IAAUC,KAChE,EAAKV,SAAS,CAAEC,KAAMa,EAAcJ,WAAY,OAAQ,WACvDP,OAAOC,aAAaC,QAAQ,OAAQC,KAAKC,UAAU,EAAKL,MAAMD,WAtC/D,EAAKC,MAAM,CACVD,KAAK,GACLS,WAAW,MAJA,E,qDAOb,WACC,IAAIM,EAAQb,OAAOC,aAAaa,QAAQ,QACxCD,EAAQV,KAAKY,MAAMF,GACfG,MAAMC,QAAQJ,IAAUA,EAAMK,OAAS,GAC1CC,KAAKtB,SAAS,CAAEC,KAAMe,M,oBAgCxB,WAAU,IAAD,OACR,EAA6BM,KAAKpB,MAA1BD,EAAR,EAAQA,KAAMS,EAAd,EAAcA,WACd,OACC,sBAAKa,UAAU,MAAf,UACC,uBAAMC,SAAU,SAAA9B,GAAC,OAAI,EAAKD,WAAWC,IAArC,UACC,uBAAO+B,KAAK,OAAOC,KAAK,QAAQC,YAAY,oBAG5C,wBAAQF,KAAK,SAAb,oBAED,qBAAKF,UAAU,OAAf,SACC,6BACEtB,EAAK2B,KAAI,SAAC9B,EAAOW,GAAR,OACT,+BACC,gCACEX,EACD,wBAAQ+B,QAAS,kBAAM,EAAKrB,KAAKC,IAAjC,qBAED,sBACCqB,MAAO,CACNC,QAAQ,GAAD,OAAKrB,IAAeD,EAAQ,OAAS,UAF9C,UAKC,uBAAMe,SAAU,SAAA9B,GAAC,OAAI,EAAKiB,WAAWjB,IAArC,UACC,uBAAO+B,KAAK,OAAOC,KAAK,UACxB,wBAAQD,KAAK,SAAb,uBAED,wBAAQA,KAAK,SAASI,QAAS,EAAKhB,WAApC,yBAdOf,EAAQW,iB,GAzDNuB,IAAMC,WCUJC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7228f921.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nclass App extends React.Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\tdata:[],\r\n\t\t\tisEditable:null,\r\n\t\t};\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tlet check = window.localStorage.getItem('data');\r\n\t\tcheck = JSON.parse(check);\r\n\t\tif (Array.isArray(check) && check.length > 0) {\r\n\t\t\tthis.setState({ data: check });\r\n\t\t}\r\n\t}\r\n\tsubmitForm = e => {\r\n\t\te.preventDefault();\r\n\t\tconst inputValue = e.target.input.value;\r\n\t\tthis.setState({ data: [...this.state.data, inputValue] }, () => {\r\n\t\t\twindow.localStorage.setItem('data', JSON.stringify(this.state.data));\r\n\t\t});\r\n\t};\r\n\tedit = index => {\r\n\t\tthis.setState({ isEditable: index });\r\n\t};\r\n\r\n\tupdateForm = e => {\r\n\t\te.preventDefault();\r\n\t\tconst inputValue = e.target.input.value;\r\n\t\tconst { data, isEditable } = this.state;\r\n\t\tconst newData = [...data]; //cloning state data\r\n\t\tnewData[isEditable] = inputValue;\r\n\t\tthis.setState({ data: newData }, () => {\r\n\t\t\twindow.localStorage.setItem('data', JSON.stringify(this.state.data));\r\n\t\t});\r\n\t};\r\n\tdeleteData = () => {\r\n\t\tconst { data, isEditable } = this.state;\r\n\t\tconst newData = [...data]; //cloning state data\r\n\t\tconst filteredData = newData.filter((input, index) => index !== isEditable);\r\n\t\tthis.setState({ data: filteredData, isEditable: null }, () => {\r\n\t\t\twindow.localStorage.setItem('data', JSON.stringify(this.state.data));\r\n\t\t});\r\n\t};\r\n\trender() {\r\n\t\tconst { data, isEditable } = this.state;\r\n\t\treturn (\r\n\t\t\t<div className='app'>\r\n\t\t\t\t<form onSubmit={e => this.submitForm(e)}>\r\n\t\t\t\t\t<input type='text' name='input' placeholder=\"name and phn no\" />\r\n\t\t\t\t\t{/* <input type=\"text\" name=\"email\" placeholder=\"email\"/> */}\r\n\t\t\t\t\t{/* <input type= \"number\" name=\"mobile number\" placeholder=\"phn no.\"/> */}\r\n\t\t\t\t\t<button type='submit'>Add</button>\r\n\t\t\t\t</form>\r\n\t\t\t\t<div className='data'>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{data.map((input, index) =>(\r\n\t\t\t\t\t\t\t<li key={input + index}>\r\n\t\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t\t{input}\r\n\t\t\t\t\t\t\t\t\t<button onClick={() => this.edit(index)}>Edit</button>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\tdisplay: `${isEditable !== index ? 'none' : 'block'}`,\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t<form onSubmit={e => this.updateForm(e)}>\r\n\t\t\t\t\t\t\t\t\t\t<input type='text' name='input' />\r\n\t\t\t\t\t\t\t\t\t\t<button type='submit'>update</button>\r\n\t\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t\t<button type='button' onClick={this.deleteData}>\r\n\t\t\t\t\t\t\t\t\t\tDelete\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}